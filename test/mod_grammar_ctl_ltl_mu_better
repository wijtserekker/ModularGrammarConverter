module main ;
using ctl ;
using ltl ;
using mucalc ;

expr ::= ctl.expr
     | ltl.expr
     | mucalc.expr
     ;




module mucalc ;
using pred ;
using bool ;

expr <= bool.expr ;
expr ::= MU pred.VAR DOT expr
     | NU pred.VAR DOT expr
     | EDGE_EXIST_LEFT pred.VAR EDGE_EXIST_RIGHT expr
     | EDGE_ALL_LEFT pred.VAR EDGE_ALL_RIGHT expr
     | bool.NEXT expr
     | bool.EXIST expr
     | bool.ALL expr
     | pred.expr
     ;

MU ::= 'mu' ;
NU ::= 'nu' ;
EDGE_EXIST_LEFT  ::= '<' ;
EDGE_EXIST_RIGHT ::= '>' ;
EDGE_ALL_LEFT    ::= '[' ;
EDGE_ALL_RIGHT   ::= ']' ;
DOT   ::= '.' ;




module ctl ;
using bool ;
using pred ;

expr <= bool.expr ;
expr <= bool.expr_extra ;
expr ::= bool.EXIST expr
     | bool.ALL expr
     | GLOBALLY expr
     | FUTURE expr
     | bool.NEXT expr
     | expr bool.UNTIL expr
     | pred.expr
     ;

GLOBALLY ::= 'G' ;
FUTURE ::= 'F' ;


module ltl ;
using pred ;
using bool ;

expr <= bool.expr ;
expr <= bool.expr_extra ;
expr ::= GLOBALLY expr
     | FUTURE expr
     | bool.NEXT expr
     | expr bool.UNTIL expr
     | expr WEAK_UNTIL expr
     | expr RELEASE expr
     | pred.expr
     ;

GLOBALLY   ::= '[]' ;
FUTURE     ::= '<>' ;
WEAK_UNTIL ::= 'W' ;
RELEASE    ::= 'R' ;





module pred ;
using bool ;

expr <= bool.expr ;
expr ::= comp_expr ;

comp_expr ::= calc_expr EQ calc_expr
            | calc_expr NEQ calc_expr
            | calc_expr LT calc_expr
            | calc_expr LEQ calc_expr
            | calc_expr GT calc_expr
            | calc_expr GEQ calc_expr
            | calc_expr EN calc_expr
            ;

calc_expr ::= VAR
            | NUMBER
            | bool.LPAR calc_expr bool.RPAR
            | calc_expr MULT calc_expr
            | calc_expr DIV calc_expr
            | calc_expr REM calc_expr
            | calc_expr ADD calc_expr
            | calc_expr SUB calc_expr
            ;

STRING    ::= '"' (~[\\"] | '\\'$)* '"' ;
CHUNK     ::= '#' ([0-9a-fA-F] [0-9a-fA-F])* '#' ;
NUMBER    ::= [0-9]+ ;
VAR       ::= '_'* ([a-zA-Z] | '\\'$) ([a-zA-Z0-9_'] | '\\'$)* ;

MULT  ::= '*' ;
DIV   ::= '/' ;
REM   ::= '%' ;
ADD   ::= '+' ;
SUB   ::= '-' ;
LT    ::= '<' ;
LEQ   ::= '<=' ;
GT    ::= '>' ;
GEQ   ::= '>=' ;
EQ    ::= '==' ;
NEQ   ::= '!=' ;
EN    ::= '??' ;




module bool;

expr ::= expr AND expr
     | expr OR expr
     | NOT expr
     | TRUE
     | FALSE
     | MAYBE
     | LPAR expr RPAR
     ;

expr_extra ::= expr_extra EQUIV expr_extra
           | expr_extra IMPLY expr_extra
           ;

LPAR  ::= '(' ;
RPAR  ::= ')' ;
TRUE      ::= 'true' ;
FALSE     ::= 'false' ;
MAYBE     ::= 'maybe' ;
NOT   ::= '!' ;
AND   ::= '&&' ;
OR    ::= '||' ;
EQUIV ::= '<->' ;
IMPLY ::= '->' ;

NEXT ::= 'X' ;
EXIST ::= 'E' ;
ALL ::= 'A' ;
UNTIL ::= 'U' ;

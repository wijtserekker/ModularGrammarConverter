module main ;
using ctl ;
using ltl ;
using mucalc ;

expr <= ctl.expr ;
expr <= ltl.expr ;
expr <= mucalc.expr ;




module mucalc ;
using pred ;

expr <= pred.expr ;
expr ::= MU pred.VAR DOT expr
     | NU pred.VAR DOT expr
     | EDGE_EXIST_LEFT pred.VAR EDGE_EXIST_RIGHT expr
     | EDGE_ALL_LEFT pred.VAR EDGE_ALL_RIGHT expr
     | pred.NEXT expr
     | pred.EXIST expr
     | pred.ALL expr
     ;

MU ::= 'mu' ;
NU ::= 'nu' ;
EDGE_EXIST_LEFT  ::= '<' ;
EDGE_EXIST_RIGHT ::= '>' ;
EDGE_ALL_LEFT    ::= '[' ;
EDGE_ALL_RIGHT   ::= ']' ;
DOT   ::= '.' ;




module ctl ;
using pred ;

expr <= pred.expr ;
expr <= pred.extra_expr ;
expr ::= pred.EXIST expr
     | pred.ALL expr
     | GLOBALLY expr
     | FUTURE expr
     | pred.NEXT expr
     | expr pred.UNTIL expr
     ;

GLOBALLY ::= 'G' ;
FUTURE ::= 'F' ;


module ltl ;
using pred ;

expr <= pred.expr ;
expr <= pred.extra_expr ;
expr ::= GLOBALLY expr
     | FUTURE expr
     | pred.NEXT expr
     | expr pred.UNTIL expr
     | expr WEAK_UNTIL expr
     | expr RELEASE expr
     ;

GLOBALLY   ::= '[]' ;
FUTURE     ::= '<>' ;
WEAK_UNTIL ::= 'W' ;
RELEASE    ::= 'R' ;





module pred ;

expr ::= VAR
     | NUMBER
     | TRUE
     | FALSE
     | MAYBE
     | STRING
     | CHUNK
     | LPAR expr RPAR
     | expr MULT expr
     | expr DIV expr
     | expr REM expr
     | expr ADD expr
     | expr SUB expr
     | expr LT expr
     | expr LEQ expr
     | expr GT expr
     | expr GEQ expr
     | expr EN expr
     | expr EQ expr
     | expr NEQ expr
     | expr AND expr
     | expr OR expr
     | NOT expr
     ;

extra_expr ::= extra_expr EQUIV extra_expr
           | extra_expr IMPLY extra_expr
           ;

STRING    ::= '"' (~[\\"] | '\\'$)* '"' ;
CHUNK     ::= '#' ([0-9a-fA-F] [0-9a-fA-F])* '#' ;
NUMBER    ::= [0-9]+ ;
TRUE      ::= 'true' ;
FALSE     ::= 'false' ;
MAYBE     ::= 'maybe' ;
VAR       ::= '_'* ([a-zA-Z] | '\\'$) ([a-zA-Z0-9_'] | '\\'$)* ;

LPAR  ::= '(' ;
RPAR  ::= ')' ;
MULT  ::= '*' ;
DIV   ::= '/' ;
REM   ::= '%' ;
ADD   ::= '+' ;
SUB   ::= '-' ;
LT    ::= '<' ;
LEQ   ::= '<=' ;
GT    ::= '>' ;
GEQ   ::= '>=' ;
EQ    ::= '==' ;
NEQ   ::= '!=' ;
EN    ::= '??' ;
NOT   ::= '!' ;
AND   ::= '&&' ;
OR    ::= '||' ;
EQUIV ::= '<->' ;
IMPLY ::= '->' ;

NEXT ::= 'X' ;
EXIST ::= 'E' ;
ALL ::= 'A' ;
UNTIL ::= 'U' ;
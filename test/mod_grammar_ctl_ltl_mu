module main ;
using ctl ;
using ltl ;
using mu ;

expr <= ctl.expr ;
expr <= ltl.expr ;
expr <= mu.expr ;




module mucalc ;
using be ;

expr <= be.bool_expr ;
expr ::= MU be.VAR DOT expr
     | NU be.VAR DOT expr
     | EDGE_EXIST_LEFT be.VAR EDGE_EXIST_RIGHT expr
     | EDGE_ALL_LEFT be.VAR EDGE_ALL_RIGHT expr
     | NEXT expr
     | EXIST expr
     | ALL expr
     ;

MU ::= 'mu' ;
NU ::= 'nu' ;
EDGE_EXIST_LEFT  ::= '<' ;
EDGE_EXIST_RIGHT ::= '>' ;
EDGE_ALL_LEFT    ::= '[' ;
EDGE_ALL_RIGHT   ::= ']' ;
NEXT  ::= 'X' ;
EXIST ::= 'E' ;
ALL   ::= 'A' ;




module ctl ;
using be ;

expr <= be.expr ;
expr <= be.bool_expr ;
expr ::= be.EXTRA_ATOM
     | EXIST expr
     | ALL expr
     | GLOBALLY expr
     | FUTURE expr
     | NEXT expr
     | expr UNTIL expr
     | bexpr
     ;

bexpr <= be.expr ;



module ltl ;
using be ;

expr <= be.expr ;
expr <= be.bool_expr ;
expr ::= be.EXTRA_ATOM
     | GLOBALLY expr
     | FUTURE expr
     | NEXT expr
     | expr UNTIL expr
     | expr WEAK_UNTIL expr
     | expr RELEASE expr
     ;

GLOBALLY   ::= '[]' ;
FUTURE     ::= '<>' ;
NEXT       ::= 'X' ;
UNTIL      ::= 'U' ;
WEAK_UNTIL ::= 'W' ;
RELEASE    ::= 'R' ;





module be ;

expr ::= LPAR expr RPAR 
     | expr MULT expr
     | expr DIV expr
     | expr REM expr
     | expr ADD expr
     | expr SUB expr
     | expr LT expr
     | expr LEQ expr
     | expr GT expr
     | expr GEQ expr
     | expr EN expr
     | expr EQUIV expr
     | expr IMPLY expr
     ;

bool_expr ::= BASIC_ATOM
          | expr EQ expr
          | expr NEQ expr
          | expr AND expr
          | expr OR expr
          | NOT expr
          ;

BASIC_ATOM ::= VAR
           | NUMBER
           | TRUE
           | FALSE
           ;

EXTRA_ATOM ::= STRING
           | CHUNK
           | MAYBE
           ;

STRING    ::= '\"' (~[\\\"] | '\\'$)* '\"' ;
CHUNK     ::= '#' ([0-9a-fA-F] [0-9a-fA-F])* '#' ;
NUMBER    ::= [0-9]+ ;
TRUE      ::= 'true' ;
FALSE     ::= 'false' ;
MAYBE     ::= 'maybe' ;
VAR       ::= '_'* ([a-zA-Z] | '\\'$) ([a-zA-Z0-9_'] | '\\'$)* ;

LPAR  ::= '(' ;
RPAR  ::= ')' ;
MULT  ::= '*' ;
DIV   ::= '/' ;
REM   ::= '%' ;
ADD   ::= '+' ;
SUB   ::= '-' ;
LT    ::= '<' ;
LEQ   ::= '<=' ;
GT    ::= '>' ;
GEQ   ::= '>=' ;
EQ    ::= '==' ;
NEQ   ::= '!=' ;
EN    ::= '??' ;
NOT   ::= '!' ;
AND   ::= '&&' ;
OR    ::= '||' ;
EQUIV ::= '->' ;
IMPLY ::= '<->' ;
